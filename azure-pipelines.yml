# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
      - 202???
  paths:
    exclude:
      - .github

pr:
  branches:
    include:
      - master
      - 202???
  paths:
    exclude:
      - .github

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

resources:
  repositories:
  - repository: sonic-mgmt
    type: github
    name: lerry-lee/sonic-mgmt
    ref: chunangli/draft_test_get_token
    endpoint: sonic-net
  - repository: buildimage
    type: github
    name: sonic-net/sonic-buildimage
    endpoint: sonic-net
    ref: master

variables:
- template: .azure-pipelines/azure-pipelines-repd-build-variables.yml@buildimage
- template: .azure-pipelines/template-variables.yml@buildimage
- name: CACHE_MODE
  value: rcache
- name: ENABLE_FIPS
  value: y
- name: BUILD_BRANCH
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    value: $(System.PullRequest.TargetBranch)
  ${{ else }}:
    value: $(Build.SourceBranchName)

stages:
#- stage: BuildVS
#  pool: sonicbld-1es
#  jobs:
#  - template: .azure-pipelines/azure-pipelines-build.yml
#    parameters:
#      buildOptions: 'USERNAME=admin SONIC_BUILD_JOBS=$(nproc) BUILD_MULTIASIC_KVM=y INCLUDE_DHCP_SERVER=y ${{ variables.VERSION_CONTROL_OPTIONS }}'
#      jobGroups:
#      - name: vs

#- stage: Build
#  pool: sonicbld-1es
#  dependsOn: []
#  jobs:
#  - template: .azure-pipelines/azure-pipelines-build.yml
#    parameters:
#      buildOptions: 'USERNAME=admin SONIC_BUILD_JOBS=$(nproc) ${{ variables.VERSION_CONTROL_OPTIONS }}'
#      jobGroups:
#      - name: broadcom
#        variables:
#          swi_image: yes
#          INCLUDE_RESTAPI: y
#      - name: mellanox
#        variables:
#          dbg_image: yes
#          docker_syncd_rpc_image: yes
#          platform_rpc: mlnx
#      - name: marvell-arm64
#        pool: sonicbld-arm64
#        variables:
#           PLATFORM_NAME: marvell
#           PLATFORM_ARCH: arm64
#      - name: marvell-armhf
#        pool: sonicbld-armhf
#        timeoutInMinutes: 1200
#        variables:
#          PLATFORM_NAME: marvell
#          PLATFORM_ARCH: armhf
#          INCLUDE_RESTAPI: y

- stage: Test
#  dependsOn: BuildVS
#  condition: and(succeeded(), and(ne(stageDependencies.BuildVS.outputs['vs.SetVar.SKIP_VSTEST'], 'YES'), in(dependencies.BuildVS.result, 'Succeeded', 'SucceededWithIssues')))
  variables:
  - group: SONiC-Elastictest
  - name: inventory
    value: veos_vtb
  - name: testbed_file
    value: vtestbed.csv

# For every test job:
# continueOnError: false means it's a required test job and will block merge if it fails
# continueOnError: true means it's an optional test job and will not block merge even though it fails(unless a required test job depends on its result)

  jobs:
  - job: t0_elastictest
    pool: sonic-ubuntu-1c
    displayName: "kvmtest-t0 by Elastictest 6666"
    timeoutInMinutes: 240
    continueOnError: false
    steps:
    - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
      parameters:
        TOPOLOGY: t0
        MIN_WORKER: $(T0_INSTANCE_NUM)
        MAX_WORKER: $(T0_INSTANCE_NUM)
        MGMT_BRANCH: $(BUILD_BRANCH)

  - job: t0_2vlans_elastictest
    pool: sonic-ubuntu-1c
    displayName: "kvmtest-t0-2vlans by Elastictest"
    timeoutInMinutes: 240
    continueOnError: false
    steps:
    - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
      parameters:
        TOPOLOGY: t0
        TEST_SET: t0-2vlans
        MIN_WORKER: $(T0_2VLANS_INSTANCE_NUM)
        MAX_WORKER: $(T0_2VLANS_INSTANCE_NUM)
        MGMT_BRANCH: $(BUILD_BRANCH)
        DEPLOY_MG_EXTRA_PARAMS: "-e vlan_config=two_vlan_a"

  - job: t1_lag_elastictest
    pool: sonic-ubuntu-1c
    displayName: "kvmtest-t1-lag by Elastictest"
    timeoutInMinutes: 240
    continueOnError: false
    steps:
    - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
      parameters:
        TOPOLOGY: t1-lag
        MIN_WORKER: $(T1_LAG_INSTANCE_NUM)
        MAX_WORKER: $(T1_LAG_INSTANCE_NUM)
        MGMT_BRANCH: $(BUILD_BRANCH)

  - job: multi_asic_elastictest
    displayName: "kvmtest-multi-asic-t1-lag by Elastictest"
    pool: sonic-ubuntu-1c
    timeoutInMinutes: 240
    continueOnError: false
    steps:
      - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
        parameters:
          TOPOLOGY: t1-8-lag
          TEST_SET: multi-asic-t1-lag
          MIN_WORKER: $(MULTI_ASIC_INSTANCE_NUM)
          MAX_WORKER: $(MULTI_ASIC_INSTANCE_NUM)
          NUM_ASIC: 4
          MGMT_BRANCH: $(BUILD_BRANCH)

  - job: dualtor_elastictest
    pool: sonic-ubuntu-1c
    displayName: "kvmtest-dualtor-t0 by Elastictest"
    timeoutInMinutes: 240
    continueOnError: false
    steps:
      - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
        parameters:
          TOPOLOGY: dualtor
          MIN_WORKER: $(T0_DUALTOR_INSTANCE_NUM)
          MAX_WORKER: $(T0_DUALTOR_INSTANCE_NUM)
          MGMT_BRANCH: $(BUILD_BRANCH)
          COMMON_EXTRA_PARAMS: "--disable_loganalyzer "

  - job: sonic_t0_elastictest
    displayName: "kvmtest-t0-sonic by Elastictest"
    pool: sonic-ubuntu-1c
    timeoutInMinutes: 240
    continueOnError: false
    steps:
      - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
        parameters:
          TOPOLOGY: t0-64-32
          MIN_WORKER: $(T0_SONIC_INSTANCE_NUM)
          MAX_WORKER: $(T0_SONIC_INSTANCE_NUM)
          TEST_SET: t0-sonic
          MGMT_BRANCH: $(BUILD_BRANCH)
          COMMON_EXTRA_PARAMS: "--neighbor_type=sonic "
          VM_TYPE: vsonic

  - job: dpu_elastictest
    displayName: "kvmtest-dpu by Elastictest"
    timeoutInMinutes: 240
    continueOnError: false
    pool: sonic-ubuntu-1c
    steps:
      - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
        parameters:
          TOPOLOGY: dpu
          MIN_WORKER: $(T0_SONIC_INSTANCE_NUM)
          MAX_WORKER: $(T0_SONIC_INSTANCE_NUM)
          MGMT_BRANCH: $(BUILD_BRANCH)

  - job: onboarding_elastictest_t0
    displayName: "onboarding t0 testcases by Elastictest - optional"
    timeoutInMinutes: 240
    continueOnError: true
    pool: sonic-ubuntu-1c
    steps:
      - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
        parameters:
          TOPOLOGY: t0
          STOP_ON_FAILURE: "False"
          RETRY_TIMES: 0
          MIN_WORKER: $(T0_ONBOARDING_SONIC_INSTANCE_NUM)
          MAX_WORKER: $(T0_ONBOARDING_SONIC_INSTANCE_NUM)
          KVM_IMAGE_BRANCH: $(BUILD_BRANCH)
          MGMT_BRANCH: $(BUILD_BRANCH)
          TEST_SET: onboarding_t0

  - job: onboarding_elastictest_t1
    displayName: "onboarding t1 testcases by Elastictest - optional"
    timeoutInMinutes: 240
    continueOnError: true
    pool: sonic-ubuntu-1c
    steps:
      - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
        parameters:
          TOPOLOGY: t1-lag
          STOP_ON_FAILURE: "False"
          RETRY_TIMES: 0
          MIN_WORKER: $(T1_LAG_ONBOARDING_INSTANCE_NUM)
          MAX_WORKER: $(T1_LAG_ONBOARDING_INSTANCE_NUM)
          KVM_IMAGE_BRANCH: $(BUILD_BRANCH)
          MGMT_BRANCH: $(BUILD_BRANCH)
          TEST_SET: onboarding_t1

  - job: onboarding_elastictest_dualtor
    displayName: "onboarding dualtor testcases by Elastictest - optional"
    timeoutInMinutes: 240
    continueOnError: true
    pool: sonic-ubuntu-1c
    steps:
      - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
        parameters:
          TOPOLOGY: dualtor
          STOP_ON_FAILURE: "False"
          RETRY_TIMES: 0
          MIN_WORKER: $(T0_DUALTOR_INSTANCE_NUM)
          MAX_WORKER: $(T0_DUALTOR_INSTANCE_NUM)
          KVM_IMAGE_BRANCH: $(BUILD_BRANCH)
          MGMT_BRANCH: $(BUILD_BRANCH)
          TEST_SET: onboarding_dualtor

#  - job: wan_elastictest
#    displayName: "kvmtest-wan by Elastictest"
#    pool: sonic-ubuntu-1c
#    timeoutInMinutes: 240
#    continueOnError: false
#    steps:
#      - template: .azure-pipelines/run-test-scheduler-template.yml
#        parameters:
#          TOPOLOGY: wan-pub
#          MIN_WORKER: $(WAN_INSTANCE_NUM)
#          MAX_WORKER: $(WAN_INSTANCE_NUM)
#          COMMON_EXTRA_PARAMS: "--skip_sanity "

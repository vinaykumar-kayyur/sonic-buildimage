//------------------------------------------------------------------------------
// {C} Copyright 2021 Pensando Systems Inc. All rights reserved
//
// protobuf specification for the top level system object
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "google/protobuf/timestamp.proto";
import "types.proto";

service SystemSvc {
  rpc InterruptGet(InterruptGetRequest) returns (stream InterruptGetResponse) {}
}

// interrupt record
message Interrupt {
  // interrupt levels
  enum Level {
    LEVEL_NONE   = 0;
    LEVEL_FATAL  = 1;
    LEVEL_HW_RMA = 2;
    LEVEL_ERROR  = 3;
    LEVEL_INFO   = 4;
  }
  // timestamp when the interrupt was last seen
  google.protobuf.Timestamp Time        = 1 [(gogoproto.stdtime) = true];
  // name of the interrupt
  string                    Name        = 2;
  // severity of the interrupt
  Level                     Severity    = 3;
  // no. of times interrupts was seen so far
  uint64                    Count       = 4;
  // description of the interrupt
  string                    Description = 5;
  // 1st occurance of this interrupt is ignored and if this interrupt happens
  // multiple times, it needs to be looked into
  bool                      IgnoreOnce  = 6;
  // ignore all occurances of this interrupt
  bool                      IgnoreAll   = 7;
  // to clear the interrupt, firmware writes zero (instead of one, usually)
  bool                      ZeroToClear = 8;
}

// InterruptGetRequest is used to query the interrupts on DSC
message InterruptGetRequest {
  // by default only FATAL and ERROR level interrupts are returned
  // All has to be set to true if all interrupts are to be returned
  bool All = 1;
}

// InterruptGetResponse is sent in response to InterruptGetRequest
message InterruptGetResponse {
  // status code to indicated whether the request is successful or not
  types.ApiStatus    ApiStatus = 1;
  // list of interrupts
  repeated Interrupt Interrupt = 2;
}
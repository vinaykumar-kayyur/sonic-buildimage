//
// {C} Copyright 2020 Pensando Systems Inc. All rights reserved
//
//------------------------------------------------------------------------------
///
/// \file
/// protobuf specification for flows
///
//------------------------------------------------------------------------------

syntax = "proto3";
package operd;

import "types.proto";

// flow log type indicates whether log is generated when flow is
// created or closed
enum FlowLogType {
  FLOW_LOG_TYPE_NONE   = 0;
  // flow log raised at the time of flow/session creation
  FLOW_LOG_TYPE_OPEN   = 1;
  // flow log raised at the time of flow/session deletion
  FLOW_LOG_TYPE_CLOSE  = 2;
  // flow log raised for long lived flows while flow is active
  FLOW_LOG_TYPE_ACTIVE = 3;
}

// security policy type due to which the flow action was chosen
enum SecurityPolicyType {
  SECURITY_POLICY_TYPE_NONE = 0;
  // flow action is the result of a security group rule
  SECURITY_POLICY_TYPE_SG   = 1;
  // flow action is the result of a stateless NACL rule (subnet/vpc level)
  SECURITY_POLICY_TYPE_NACL = 2;
}

// flow open reason
enum FlowOpenReason {
  FLOW_OPEN_REASON_NONE      = 0;
  // flow opened by flow miss packet
  FLOW_OPEN_REASON_FLOW_MISS = 1;
  // flow opened by flow sync from peer
  FLOW_OPEN_REASON_FLOW_SYNC = 2;
  // flow opened by bulk sync from peer
  FLOW_OPEN_REASON_FULL_SYNC = 3;
  // flow opened by vmotion sync
  FLOW_OPEN_REASON_VMOTION   = 4;
}

// flow close reason
enum FlowCloseReason {
  FLOW_CLOSE_REASON_NONE           = 0;
  // flow closed by user API
  FLOW_CLOSE_REASON_USER           = 1;
  // flow closed by aging (idle, drop, close etc.,) timers
  FLOW_CLOSE_REASON_AGING          = 2;
  // flow closed by vmotion sync
  FLOW_CLOSE_REASON_VMOTION        = 3;
  // flow closed by TCP FIN packet
  FLOW_CLOSE_REASON_TCP_FULL_CLOSE = 4;
  // flow closed by TCP RST packet
  FLOW_CLOSE_REASON_TCP_RESET      = 5;
  // flow closed by config
  FLOW_CLOSE_REASON_CFG            = 6;
  // flow closed by config mismatch
  FLOW_CLOSE_REASON_CFG_MISMATCH   = 7;
  // flow closed by link down
  FLOW_CLOSE_REASON_LINK_DOWN      = 8;
  // flow closed by flow update error 
  FLOW_CLOSE_REASON_FLOW_UPDATE_ERR = 9;
  // flow closed by internal error 
  FLOW_CLOSE_REASON_INTERNAL_ERR   = 10;
  // flow closed by ALG last data session delete
  FLOW_CLOSE_REASON_ALG_LAST_DATA_SESS_DEL = 11;
}

// protobuf format for flow logs (this is the format consumers will see flow
// logs in). The producer (e.g., VPP) will do just a binary dump to shared
// memory and a decoder (invoked by operd) will transform the contents into
// this format
message FlowLog {
  // timestamp indicating when the flow is created/closed
  uint64                   Timestamp                = 1;
  // flow open log or flow close log
  FlowLogType              LogType                  = 2;
  // flow key
  types.FlowKey            Key                      = 3;
  // SessionId identifies unique id assigned for the the flow pair
  // for the lifetime of the session
  uint64                   SessionId                = 4;
  // source interface of first packet in the session
  // NOTE: this is source vnic's PF/VF/Tunnel uuid if the session is initiated
  //       locally (irrespective of whether destination is local or remote) and
  //       if the session is created because first packet came on uplink, this
  //       field is left empty
  bytes                    SrcInterface             = 5;
  // source vnic's uuid if the session is originated from local workload,
  // empty otherwise
  bytes                    SrcVnic                  = 6;
  // vpc of the client/initiator of the session
  bytes                    SrcVPC                   = 7;
  // vpc of the server/destination of the session
  bytes                    DstVPC                   = 8;
  // security policy id, if security policy was evaluated
  bytes                    SecurityPolicy           = 9;
  // security policy rule id, if security policy was evaluated
  bytes                    SecurityPolicyRule       = 10;
  // flow action taken
  types.SecurityRuleAction FlowAction               = 11;
  // NAT-ed source IP after the rewrite, if any
  types.IPAddress          SrcNATIP                 = 12;
  // source NAT port, if any
  uint32                   SrcNATPort               = 13;
  // NAT-ed destination IP after the rewrite, if any
  types.IPAddress          DstNATIP                 = 14;
  // destination NAT port, if any
  uint32                   DstNATPort               = 15;
  // initiator flow octet count
  uint64                   IflowBytes               = 16;
  // initator flow packet count
  uint64                   IflowPackets             = 17;
  // responder flow octet count
  uint64                   RflowBytes               = 18;
  // responder flow packet count
  uint64                   RflowPackets             = 19;
  // vlan id in the received packet
  uint32                   SrcVlan                  = 20;
  // security policy rule hw id, if security policy was evaluated
  uint32                   SecurityPloicyRuleId     = 21;
  // destination vnic uuid
  // NOTE:
  // 1. this is valid only in the case of Local-to-Local traffic scenario in the BITW_SERVICE_MODE
  bytes                    DstVnic                  = 22;
  // indicates if it is an encrypted flow
  bool                     Encrypted                = 23;
  // flow open reason
  FlowOpenReason           OpenReason               = 24;
  // indicates if the flow is originated from the host
  bool                     HostOrigin               = 25;
  // ingress security policy id of destination, if security policy was evaluated
  bytes                    DstSecurityPolicy        = 26;
  // ingress secuiryt policy rule id of destination, if security policy was evaluated
  bytes                    DstSecurityPolicyRule    = 27;
  // flow close reason
  // NOTE: only applicable when LogType is FLOW_LOG_TYPE_CLOSE
  FlowCloseReason          CloseReason              = 28;
}

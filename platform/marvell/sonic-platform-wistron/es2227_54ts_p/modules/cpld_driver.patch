diff --git a/platform/marvell-arm64/sonic-platform-es2227-54ts-p/es2227_54ts_p/modules/wistron_cpld.c b/platform/marvell-arm64/sonic-platform-es2227-54ts-p/es2227_54ts_p/modules/wistron_cpld.c
index 213ca70..116ba9d 100755
--- a/platform/marvell-arm64/sonic-platform-es2227-54ts-p/es2227_54ts_p/modules/wistron_cpld.c
+++ b/platform/marvell-arm64/sonic-platform-es2227-54ts-p/es2227_54ts_p/modules/wistron_cpld.c
@@ -150,7 +150,7 @@ static ssize_t cpld_read_psu_status(struct device *dev, struct device_attribute
     mutex_unlock(&list_lock);
 
     res = (val & (1 << bit)) >> bit;
-    //0 : present 
+    //0 : present
     //1 : not present
     //0 : power on
     //1 : power off
@@ -1238,6 +1238,67 @@ static ssize_t poe_enable_write(struct device *dev, struct device_attribute *att
     return count;
 }
 
+static ssize_t msci_ctl2_read(struct device *dev, struct device_attribute *attr, char *buf)
+{
+    int val = 0, res = 0, bit = 0, mask = 0;
+    unsigned char command = CPLD_MSCI_CTL2_REG;
+    struct i2c_client *client = to_i2c_client(dev);
+    struct sensor_device_attribute *sda = to_sensor_dev_attr(attr);
+
+    bit = sda->index;
+    mask = (0x1) << bit;
+
+    mutex_lock(&list_lock);
+
+    val = i2c_smbus_read_byte_data(client, command);
+    if (val < 0) {
+        mutex_unlock(&list_lock);
+        return val;
+    }
+
+    mutex_unlock(&list_lock);
+
+    res = (val & mask) >> bit;
+
+    return sprintf(buf, "%d\n", res);
+}
+
+static ssize_t msci_ctl2__write(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+    struct i2c_client *client = to_i2c_client(dev);
+    struct sensor_device_attribute *sda = to_sensor_dev_attr(attr);
+    unsigned char command = CPLD_MSCI_CTL2_REG;
+    int val = 0, res = 0, bit = 0, mask = 0;
+
+    val = kstrtoint(buf, 10, &res);
+    if (val)
+        return val;
+
+    if (res < 0 || res > 1)
+        return -EINVAL;
+
+    bit = sda->index;
+    mask = (0x1) << bit;
+
+    mutex_lock(&list_lock);
+
+    val = i2c_smbus_read_byte_data(client, command);
+    if (val < 0) {
+        mutex_unlock(&list_lock);
+        return val;
+    }
+
+    val &= ~(mask);
+
+    val |= (res << bit);
+
+    i2c_smbus_write_byte_data(client, command, val);
+
+    mutex_unlock(&list_lock);
+
+    return count;
+}
+
 static SENSOR_DEVICE_ATTR(board_rev, S_IRUGO, cpld_show_board_version, NULL, 0);
 //static SENSOR_DEVICE_ATTR(board_id, S_IRUGO, cpld_show_board_id, NULL, 0);
 static SENSOR_DEVICE_ATTR(cpld_rev, S_IRUGO, cpld_show_version, NULL, 0);
@@ -1440,6 +1501,8 @@ static SENSOR_DEVICE_ATTR(port_led_auto, S_IRUGO | S_IWUSR, port_led_auto_read,
 
 static SENSOR_DEVICE_ATTR(poe_en_ctrl, S_IRUGO | S_IWUSR, poe_enable_read, poe_enable_write, 0);
 
+static SENSOR_DEVICE_ATTR(psu_vsense, S_IRUGO | S_IWUSR, msci_ctl2_read, msci_ctl2_write, PSU_VSENSE);
+static SENSOR_DEVICE_ATTR(psu_pwrgd, S_IRUGO, msci_ctl2_read, NULL, PSU_PWRGD);
 /*
 static SENSOR_DEVICE_ATTR(rst_mb_ioiexp, S_IRUGO | S_IWUSR, rst_ctrl_read, rst_ctrl_write, RST_MB_IOIEXP);
 static SENSOR_DEVICE_ATTR(rst_phy0_5, S_IRUGO | S_IWUSR, rst_ctrl_read, rst_ctrl_write, RST_PHY0_5);
diff --git a/platform/marvell-arm64/sonic-platform-es2227-54ts-p/es2227_54ts_p/modules/wistron_cpld.h b/platform/marvell-arm64/sonic-platform-es2227-54ts-p/es2227_54ts_p/modules/wistron_cpld.h
index 46b7ec7..39746a7 100755
--- a/platform/marvell-arm64/sonic-platform-es2227-54ts-p/es2227_54ts_p/modules/wistron_cpld.h
+++ b/platform/marvell-arm64/sonic-platform-es2227-54ts-p/es2227_54ts_p/modules/wistron_cpld.h
@@ -86,6 +86,8 @@
 #define CPLD_INT_CTL4_REG           0x3B
 #define CPLD_MSCI_CTL_REG           0x3C
 #define CPLD_PORT_LED_MANUAL_REG    0x3D
+#define CPLD_RESET_CTL3_REG         0x3E
+#define CPLD_MSCI_CTL2_REG          0x3F
 
 static char* power_ctrl_str1[] = {
     "P1V2_OOB_EN", // 0
@@ -267,4 +269,9 @@ enum int_shift_bit {
     MB_MOD_PRE_INT = 20,
 };
 
+enum msci_ctl2_shift_bit {
+    PSU_VSENSE = 0,
+    PSU_PWRGD = 1,
+};
+
 #endif /* _WISTRON_SWITCH_CPLD_H */
